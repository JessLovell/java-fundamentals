/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;

public class LibraryTest {
    @Test public void testSomeLibraryMethod() {
        Library classUnderTest = new Library();
        assertTrue("someLibraryMethod should return 'true'", classUnderTest.someLibraryMethod());
    }

    @Test public void testRolls() {
        int[] testArray = new int[4];
        testArray = Library.roll(4);
        assertTrue("rolls test should return '4'", 4 == testArray.length);
    }

    @Test public void testContainsDuplicates() {
        int[] duplicates = {1, 2, 2, 4, 5};
        int[] alsoDuplicates = {4, 5, 6, 7, 8, 5, 9};
        int[] noDuplicates = {2, 3, 4, 5, 6, 7, 8};

        assertTrue("duplicates test should return 'true'", Library.containsDuplicates(duplicates));
        assertTrue("duplicates test should return 'true'", Library.containsDuplicates(alsoDuplicates));
        assertFalse("duplicates test should return 'false'", Library.containsDuplicates(noDuplicates));
    }

    @Test public void testCalculateAverage() {
        int[] avg50 = {0, 100};
        int[] avg6 = {4, 5, 6, 7, 8, 5, 9};
        int[] avg5 = {2, 3, 4, 5, 6, 7, 8};

        assertEquals("calculateAverage should return '5'", 5, Library.calculateAverage(avg5));
        assertEquals("calculateAverage should return '6'", 6, Library.calculateAverage(avg6));
        assertEquals("calculateAverage should return '50'", 50, Library.calculateAverage(avg50));
    }

    @Test public void testCalculateArrAverage() {
        int[][] temps = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };

        int[] tempsExpected = {55, 54, 60, 53, 59, 57, 61};

        int[][] anotherOne = {
                {10, 2, 3, 4, 5, 6, 7},
                {0, 2, 5, 6, 7, 8, 0}
        };
        int[] anotherExpected = {0, 2, 5, 6, 7, 8, 0};

        assertArrayEquals("calculateArrAverage expected: {0, 2, 5, 6, 7, 8, 0}", anotherExpected, Library.calculateArrAverage(anotherOne));
        assertArrayEquals("calculateArrAverage expected:{55, 54, 60, 53, 59, 57, 61}", tempsExpected, Library.calculateArrAverage(temps));
    }

    @Test public void testWeatherData() {
//        String expectedResponse = "";
//
//        private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
//        private final PrintStream originalOut = System.out;
//        System.setOut(new PrintStream(outContent));
//        Library.weatherData();
//        assertTrue("", outContent.toString() == expectedoutput);
//        System.setOut(originalOut);
//        System.out.println(outContent.toString());


    }

    @Test public void testTally() {
        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");
        assertEquals("Should be Bush", "Bush", Library.tally(votes));
    }
}
